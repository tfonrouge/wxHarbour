# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.6 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# C compiler 
CC = gcc

# C++ compiler 
CXX = g++

# Standard preprocessor flags (common for CC and CXX) 
CPPFLAGS ?= 

# Standard linker flags 
LDFLAGS ?= 

# [x]Harbour compiler used (www.harbour-project.org  or  www.xharbour.com) [harbour,xharbour]
HBCOMPILER ?= harbour

# [x]Harbour compiler executable name 
HBCC ?= harbour

# Link with Harbour multithread libraries [no,yes]
HBMT ?= no

# ---------------------------------------------------------------
# [x]Harbour optional libraries
# ---------------------------------------------------------------
# Link in the Harbour TIP library [yes,no]
HBLIB_TIP ?= no

# Link in the Harbour FM library [yes,no]
HBLIB_FM ?= no

# Link in the Harbour CT library [yes,no]
HBLIB_CT ?= yes

# Link in the Harbour GTTRM library [yes,no]
HBLIB_GTTRM ?= yes

# Link in the System GPM library [yes,no]
HBLIB_GPM ?= no

# Link in the Harbour GTXWC library [yes,no]
HBLIB_GTXWC ?= no

# Link in the Harbour GTCRS library [yes,no]
HBLIB_GTCRS ?= no

# Link in the Harbour GTSLN library [yes,no]
HBLIB_GTSLN ?= no

# Link in the Harbour GTCGI library [yes,no]
HBLIB_GTCGI ?= no

# Link in the Harbour GTSTD library [yes,no]
HBLIB_GTSTD ?= no

# Link in the Harbour GTPCA library [yes,no]
HBLIB_GTPCA ?= no

# ---------------------------------------------------------------
# [x]Harbour compiler options
# ---------------------------------------------------------------
# Standard flags for Harbour compiler 
HBFLAGS ?= -n -a -v -m -gc -q0

# Type of Harbour compiled binaries [debug,release]
HBBUILD ?= release

# Warning level for the Harbour Compiler [0,1,2,3]
HBWARNL ?= 3

# Exit severity level for the Harbour Compiler [0,1,2]
HBEXITSL ?= 2

# Where to search for Harbour includes 
HB_INC_PATH ?= /usr/include/$(HBCOMPILER)

# Where to search for Harbour libs 
HB_LIB_PATH ?= /usr/lib/$(HBCOMPILER)

# Where the object and lib files are built 
__BUILDDIR__ ?= obj/gcc-unix

# Encoding [ansi,unicode]
WX_ENCODING ?= unicode

#  [release,debug]
WX_BUILD ?= release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

_WL_STARTGROUP = `if gcc --version | grep apple >/dev/null ; then echo "" ; else echo \
	"-Wl,--start-group" ; fi`
_WL_ENDGROUP = `if gcc --version | grep apple >/dev/null ; then echo "" ; else echo \
	"-Wl,--end-group" ; fi`
TOOLBAR_CFLAGS = -I$(HB_INC_PATH) -Iinclude/wxHarbour -I/usr/include/wxHarbour \
	-W -Wall -O2 $(__D_WX_UNICODE_p) $(__D_WX_DEBUG_p) $(__WX_DEBUG_INFO) \
	-I/usr/local/include/$(HBCOMPILER) -I../../include/wxHarbour $(CPPFLAGS) \
	$(HBCC_DEFINE) -fno-strict-aliasing
TOOLBAR_OBJECTS =  \
	$(__BUILDDIR__)/toolbar_toolbar.o
TOOLBAR_HBFLAGS = $(HBFLAGS) -w$(HBWARNL) -es$(HBEXITSL) $(__HBDEBUG__) \
	$(__HBMTFLAG__) -dHB_OS_LINUX `if uname | grep Darwin >/dev/null ; then echo \
	"-dHB_OS_DARWIN" ; else echo "" ; fi` -I$(HB_INC_PATH) -Iinclude/wxHarbour \
	-I/usr/include/wxHarbour $(__D_WX_UNICODE_p) $(__D_WX_DEBUG_p) \
	-I/usr/local/include/$(HBCOMPILER) -I../../include/wxHarbour

### Conditionally set variables: ###

ifeq ($(HBMT),yes)
__HBMTLIB__ = mt
endif
ifeq ($(HBMT),yes)
__HBMTFLAG__ = -DHB_MT
endif
ifeq ($(HBBUILD),debug)
__HBDEBUG__ = -b -d_DEBUG_
endif
ifeq ($(HBCOMPILER),harbour)
HBCC_DEFINE = -D__HARBOUR__
endif
ifeq ($(HBCOMPILER),xharbour)
HBCC_DEFINE = -D__XHARBOUR__
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_VM_p = -lhbvm$(__HBMTLIB__)
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_VM_p = -lvm$(__HBMTLIB__)
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PP_p = -lhbpp
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PP_p = -lpp
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RTL_p = -lhbrtl
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RTL_p = -lrtl
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDD_p = -lhbrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDD_p = -lrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDFPT_p = -lrddfpt
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDFPT_p = -ldbffpt
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDCDX_p = -lrddcdx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDCDX_p = -ldbfcdx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDNTX_p = -lrddntx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDNTX_p = -ldbfntx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_USRRDD_p = -lhbusrrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_USRRDD_p = -lusrrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_MACRO_p = -lhbmacro
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_MACRO_p = -lmacro
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_COMMON_p = -lhbcommon
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_COMMON_p = -lcommon
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_LANG_p = -lhblang
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_LANG_p = -llang
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPAGE_p = -lhbcpage
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPAGE_p = -lcodepage
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_DEBUG_p = -lhbdebug
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_DEBUG_p = -ldebug
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPLR_p = -lhbcplr
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPLR_p = 
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PCRE_p = -lhbpcre
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PCRE_p = -lpcrepos
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lhbfm
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lfm
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lhbct
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lct
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -lhbtip
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -ltip
endif
endif
ifeq ($(HBLIB_GTTRM),yes)
__LIB_GTTRM_p = -lgttrm
endif
ifeq ($(HBLIB_GTXWC),yes)
__LIB_GTXWC_p = -lgtxwc
endif
ifeq ($(HBLIB_GTCRS),yes)
__LIB_GTCRS_p = -lgtcrs
endif
ifeq ($(HBLIB_GTSLN),yes)
__LIB_GTSLN_p = -lgtsln
endif
ifeq ($(HBLIB_GTCGI),yes)
__LIB_GTCGI_p = -lgtcgi
endif
ifeq ($(HBLIB_GTSTD),yes)
__LIB_GTSTD_p = -lgtstd
endif
ifeq ($(HBLIB_GTPCA),yes)
__LIB_GTPCA_p = -lgtpca
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour_$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)-$(WX_BUILD)
endif
endif
ifeq ($(HBLIB_GTCRS),yes)
__LIB_NCURSES_p = -lncurses
endif
ifeq ($(HBLIB_GTSLN),yes)
__LIB_SLANG_p = -lslang
endif
ifeq ($(HBLIB_GPM),yes)
__LIB_GPM_p = -lgpm
endif
ifeq ($(HBLIB_GTXWC),yes)
__LIB_X11_p = -lX11
endif
ifeq ($(WX_ENCODING),unicode)
__D_WX_UNICODE_p = -D_UNICODE
endif
ifeq ($(WX_BUILD),debug)
__D_WX_DEBUG_p = -D__WXDEBUG__
endif
ifeq ($(WX_BUILD),debug)
__WX_DEBUG_INFO = -g
endif


all: $(__BUILDDIR__)
$(__BUILDDIR__):
	@mkdir -p $(__BUILDDIR__)

### Targets: ###

all: ./toolbar

install: 

uninstall: 

clean: 
	rm -f $(__BUILDDIR__)/*.o
	rm -f $(__BUILDDIR__)/*.d
	rm -f ./toolbar

./toolbar: $(TOOLBAR_OBJECTS)
	$(CXX) -o $@ $(TOOLBAR_OBJECTS)  $(__WX_DEBUG_INFO)  -L$(HB_LIB_PATH) -L/usr/X11R6/lib -L/usr/local/lib/$(HBCOMPILER) -L../../$(__BUILDDIR__) $(LDFLAGS)  $(_WL_STARTGROUP) $(__LIB_VM_p) $(__LIB_PP_p) $(__LIB_RTL_p) $(__LIB_RDD_p) $(__LIB_RDDFPT_p) $(__LIB_RDDCDX_p) $(__LIB_RDDNTX_p) -lhbsix $(__LIB_USRRDD_p) $(__LIB_MACRO_p) $(__LIB_COMMON_p) $(__LIB_LANG_p) $(__LIB_CPAGE_p) $(__LIB_DEBUG_p) $(__LIB_CPLR_p) $(__LIB_PCRE_p) $(__LIB_FM_p) $(__LIB_CT_p) $(__LIB_TIP_p) $(__LIB_GTTRM_p) $(__LIB_GTXWC_p) $(__LIB_GTCRS_p) $(__LIB_GTSLN_p) $(__LIB_GTCGI_p) $(__LIB_GTSTD_p) $(__LIB_GTPCA_p) $(__WXHLIBNAME_p) $(_WL_ENDGROUP) `wx-config --libs` -lm -ldl $(__LIB_NCURSES_p) $(__LIB_SLANG_p) $(__LIB_GPM_p) $(__LIB_X11_p)

run: all
	../../bin/run_App.sh toolbar

$(__BUILDDIR__)/toolbar_toolbar.o: ./toolbar.prg
	$(HBCC) $(TOOLBAR_HBFLAGS) -o$@_.c $<
	$(CC) -c $(TOOLBAR_CFLAGS) -o$@ $@_.c

.PHONY: all install uninstall clean


# Dependencies tracking:
-include $(__BUILDDIR__)/*.d
