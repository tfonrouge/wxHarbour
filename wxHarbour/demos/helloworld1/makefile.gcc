# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.6 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# The common installation prefix for binary and DLL files 
EXEC_PREFIX ?= C:\opt\bin

# C++ compiler 
CXX = g++

# Standard linker flags 
LDFLAGS ?= 

# Path for the installed [x]Harbour compiler (bin,lib and include dirs) 
HBPATH_INSTALL ?= $(HB_INSTALL_PREFIX)

# [x]Harbour compiler used (www.harbour-project.org  or  www.xharbour.com) [harbour,xharbour]
HBCOMPILER ?= harbour

# [x]Harbour compiler executable name 
HBCC ?= harbour

# ---------------------------------------------------------------
# [x]Harbour optional libraries
# ---------------------------------------------------------------
# Link in the Harbour TIP library [yes,no]
HBLIB_TIP ?= no

# Link in the Harbour FM library [yes,no]
HBLIB_FM ?= no

# Link in the Harbour CT library [yes,no]
HBLIB_CT ?= yes

# Link in the Harbour GTWIN library [yes,no]
HBLIB_GTWIN ?= yes

# Link in the Harbour GTXVT library [yes,no]
HBLIB_GTXVT ?= no

# Link in the Harbour GTCGI library [yes,no]
HBLIB_GTCGI ?= no

# Link in the Harbour GTSTD library [yes,no]
HBLIB_GTSTD ?= no

# Link in the Harbour GTPCA library [yes,no]
HBLIB_GTPCA ?= no

# ---------------------------------------------------------------
# [x]Harbour compiler options
# ---------------------------------------------------------------
# Standard flags for Harbour compiler 
HBFLAGS ?= -n -a -v -m -go

# Type of Harbour compiled binaries [debug,release]
HBBUILD ?= release

# Warning level for the Harbour Compiler [0,1,2,3]
HBWARNL ?= 3

# Exit severity level for the Harbour Compiler [0,1,2]
HBEXITSL ?= 2

# Where to search for Harbour includes 
HB_INC_PATH ?= $(HB_INC_INSTALL)

# Where to search for Harbour libs 
HB_LIB_PATH ?= $(HB_LIB_INSTALL)

# Where the object and lib files are built 
__BUILDDIR__ ?= obj\gcc-win32

# ---------------------------------------------------------------
# wxWidgets flags (version 2.8 required)
# ---------------------------------------------------------------
# 
# Where is wxWidgets installed 
WX_PATH ?= C:\wxWidgets-2.8.9

# Encoding [ansi,unicode]
WX_ENCODING ?= unicode

#  [release,debug]
WX_BUILD ?= release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

PREFIX = $(HBPATH_INSTALL)
HELLOWORLD1_OBJECTS =  \
	$(__BUILDDIR__)\helloworld1_helloworld1.o
HELLOWORLD1_HBFLAGS = $(HBFLAGS) -w$(HBWARNL) -es$(HBEXITSL) $(__HBDEBUG__) \
	-dHB_OS_WIN_32 -Iinclude -I$(HB_INC_PATH) -I$(PREFIX)\include \
	$(____D_WX_UNICODE_FILENAMES_p) $(____D_WX_DEBUG_FILENAMES_p) \
	$(____HBCMP_DEF_FILENAMES_p) -D__WXMSW__ -I$(WX_PATH)\Include \
	-I$(WX_PATH)\lib\gcc_lib\msw$(WX_LIBID) -I..\..\include

### Conditionally set variables: ###

ifeq ($(HBBUILD),debug)
__HBDEBUG__ = -b -d_DEBUG_
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_VM_p = -lhbvm
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_VM_p = -lvm
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PP_p = -lhbpp
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PP_p = -lpp
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RTL_p = -lhbrtl
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RTL_p = -lrtl
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDD_p = -lhbrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDD_p = -lrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDFPT_p = -lrddfpt
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDFPT_p = -ldbffpt
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDCDX_p = -lrddcdx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDCDX_p = -ldbfcdx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDNTX_p = -lrddntx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDNTX_p = -ldbfntx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_USRRDD_p = -lhbusrrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_USRRDD_p = -lusrrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_MACRO_p = -lhbmacro
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_MACRO_p = -lmacro
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_COMMON_p = -lhbcommon
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_COMMON_p = -lcommon
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_LANG_p = -lhblang
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_LANG_p = -llang
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPAGE_p = -lhbcpage
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPAGE_p = -lcodepage
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_DEBUG_p = -lhbdebug
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_DEBUG_p = -ldebug
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPLR_p = -lhbcplr
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPLR_p = 
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PCRE_p = -lhbpcre
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PCRE_p = -lpcrepos
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lhbfm
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lfm
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lhbct
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lct
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -lhbtip
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -ltip
endif
endif
ifeq ($(HBLIB_GTCGI),yes)
__LIB_GTCGI_p = -lgtcgi
endif
ifeq ($(HBLIB_GTSTD),yes)
__LIB_GTSTD_p = -lgtstd
endif
ifeq ($(HBLIB_GTPCA),yes)
__LIB_GTPCA_p = -lgtpca
endif
ifeq ($(HBLIB_GTXVT),yes)
__LIB_GTXVT_p = -lgtxvt
endif
ifeq ($(HBLIB_GTWIN),yes)
__LIB_GTWIN_p = -lgtwin
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour-$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour-$(WX_ENCODING)
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour-$(WX_ENCODING)-$(WX_BUILD)
endif
endif
ifeq ($(WX_ENCODING),unicode)
____D_WX_UNICODE_FILENAMES_p = -D_UNICODE
endif
ifeq ($(WX_BUILD),debug)
____D_WX_DEBUG_FILENAMES_p = -D__WXDEBUG__
endif
ifeq ($(HBCOMPILER),harbour)
____HBCMP_DEF_FILENAMES_p = -D__HARBOUR__
endif
ifeq ($(HBCOMPILER),xharbour)
____HBCMP_DEF_FILENAMES_p = -D__XHARBOUR__
endif
ifeq ($(WX_BUILD),debug)
__WX_DEBUG_INFO_3 = -g
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
WX_LIBID = d
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = ud
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = u
endif
endif


all: $(__BUILDDIR__)
$(__BUILDDIR__):
	-if not exist $(__BUILDDIR__) mkdir $(__BUILDDIR__)

### Targets: ###

all: .\helloworld1.exe

install: 

uninstall: 

clean: 
	-if exist $(__BUILDDIR__)\*.o del $(__BUILDDIR__)\*.o
	-if exist $(__BUILDDIR__)\*.d del $(__BUILDDIR__)\*.d
	-if exist .\helloworld1.exe del .\helloworld1.exe

.\helloworld1.exe: $(HELLOWORLD1_OBJECTS)
	$(CXX) -o $@ $(HELLOWORLD1_OBJECTS)  $(__WX_DEBUG_INFO_3) -L$(WX_PATH)\lib\gcc_lib -Wl,--subsystem,windows -mwindows -L$(HB_LIB_PATH) -L..\..\$(__BUILDDIR__) $(LDFLAGS)  -Wl,--start-group $(__LIB_VM_p) $(__LIB_PP_p) $(__LIB_RTL_p) $(__LIB_RDD_p) $(__LIB_RDDFPT_p) $(__LIB_RDDCDX_p) $(__LIB_RDDNTX_p) -lhbsix $(__LIB_USRRDD_p) $(__LIB_MACRO_p) $(__LIB_COMMON_p) $(__LIB_LANG_p) $(__LIB_CPAGE_p) $(__LIB_DEBUG_p) $(__LIB_CPLR_p) $(__LIB_PCRE_p) $(__LIB_FM_p) $(__LIB_CT_p) $(__LIB_TIP_p) $(__LIB_GTCGI_p) $(__LIB_GTSTD_p) $(__LIB_GTPCA_p) $(__LIB_GTXVT_p) $(__LIB_GTWIN_p) $(__WXHLIBNAME_p) -Wl,--end-group -lwxmsw28$(WX_LIBID)_richtext -lwxmsw28$(WX_LIBID)_aui -lwxmsw28$(WX_LIBID)_core -lwxbase28$(WX_LIBID) -lwxtiff -lwxjpeg -lwxpng -lwxzlib -lwxregex$(WX_LIBID) -lwxmsw28$(WX_LIBID)_adv -lwxmsw28$(WX_LIBID)_html -lwxmsw28$(WX_LIBID)_xrc -lwxbase28$(WX_LIBID)_net -lwxbase28$(WX_LIBID)_xml -lwxexpat -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lwsock32

run: all
	.\helloworld1.exe

$(__BUILDDIR__)\helloworld1_helloworld1.o: ./helloworld1.prg
	$(HBCC) $(HELLOWORLD1_HBFLAGS) -o$@ $<

.PHONY: all install uninstall clean


SHELL := $(COMSPEC)

# Dependencies tracking:
-include $(__BUILDDIR__)/*.d
