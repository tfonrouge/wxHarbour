# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.3 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# The common installation prefix for header, data and library files 
PREFIX := C:\opt

# The common installation prefix for binary and DLL files 
EXEC_PREFIX := C:\opt\bin

# C++ compiler 
CXX := g++

# Standard linker flags 
LDFLAGS := 

# [x]Harbour compiler used (www.harbour-project.org  or  www.xharbour.com) [harbour,xharbour]
HBCOMPILER := harbour

# [x]Harbour compiler executable name 
HBCC := harbour

# ---------------------------------------------------------------
# [x]Harbour optional libraries
# ---------------------------------------------------------------
#     Link in the TIP library [yes,no]
HBLIB_TIP := no

# Link in the FM library [yes,no]
HBLIB_FM := no

# Link in the CT library [yes,no]
HBLIB_CT := no

# ---------------------------------------------------------------
# [x]Harbour compiler options
# ---------------------------------------------------------------
# Standard flags for Harbour compiler 
HBFLAGS := -n -a -v -m -go

# Type of Harbour compiled binaries [debug,release]
HBBUILD := release

# Warning level for the Harbour Compiler [0,1,2,3]
HBWARNL := 3

# Exit severity level for the Harbour Compiler [0,1,2]
HBEXITSL := 2

# Where to search for Harbour includes 
HB_INC_PATH := $(HB_INC_INSTALL)

# Where to search for Harbour libs 
HB_LIB_PATH := $(HB_LIB_INSTALL)

# Where the object and lib files are built 
__BUILDDIR__ := obj\gcc-win32

# ---------------------------------------------------------------
# wxWidgets flags (version 2.8 required)
# ---------------------------------------------------------------
# 
# Where is wxWidgets installed 
WX_PATH := C:\wxWidgets-2.8.8

# Encoding [ansi,unicode]
WX_ENCODING := unicode

#  [release,debug]
WX_BUILD := release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

SIZERS_OBJECTS =  \
	$(__BUILDDIR__)\sizers_login.o \
	$(__BUILDDIR__)\sizers_main.o
SIZERS_HBFLAGS = $(HBFLAGS) -w$(HBWARNL) -es$(HBEXITSL) $(__HBDEBUG__) \
	-dHB_OS_WIN_32 -Iinclude -I$(HB_INC_PATH) -I$(PREFIX)\include \
	-I$(WX_PATH)\Include -I$(WX_PATH)\lib\gcc_lib\msw$(WX_LIBID) \
	-I..\..\include

### Conditionally set variables: ###

ifeq ($(HBBUILD),debug)
__HBDEBUG__ = -b -d_DEBUG_
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_VM_p = -lhbvm
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_VM_p = -lvm
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PP_p = -lhbpp
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PP_p = -lpp
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RTL_p = -lhbrtl
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RTL_p = -lrtl
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDD_p = -lhbrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDD_p = -lrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDFPT_p = -lrddfpt
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDFPT_p = -ldbffpt
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDCDX_p = -lrddcdx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDCDX_p = -ldbfcdx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_RDDNTX_p = -lrddntx
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_RDDNTX_p = -ldbfntx
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_USRRDD_p = -lhbusrrdd
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_USRRDD_p = -lusrrdd
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_MACRO_p = -lhbmacro
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_MACRO_p = -lmacro
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_COMMON_p = -lhbcommon
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_COMMON_p = -lcommon
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_LANG_p = -lhblang
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_LANG_p = -llang
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPAGE_p = -lhbcpage
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPAGE_p = -lcodepage
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_DEBUG_p = -lhbdebug
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_DEBUG_p = -ldebug
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_CPLR_p = -lhbcplr
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_CPLR_p = 
endif
ifeq ($(HBCOMPILER),harbour)
__LIB_PCRE_p = -lhbpcre
endif
ifeq ($(HBCOMPILER),xharbour)
__LIB_PCRE_p = -lpcrepos
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lhbfm
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_FM),yes)
__LIB_FM_p = -lfm
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lhbct
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_CT),yes)
__LIB_CT_p = -lct
endif
endif
ifeq ($(HBCOMPILER),harbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -lhbtip
endif
endif
ifeq ($(HBCOMPILER),xharbour)
ifeq ($(HBLIB_TIP),yes)
__LIB_TIP_p = -ltip
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour-$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour-$(WX_ENCODING)
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour-$(WX_ENCODING)-$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),debug)
__WX_DEBUG_INFO_4 = -g
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
WX_LIBID = d
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = ud
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = u
endif
endif


all: $(__BUILDDIR__)
$(__BUILDDIR__):
	-if not exist $(__BUILDDIR__) mkdir $(__BUILDDIR__)

### Targets: ###

all: .\sizers.exe

install: all

uninstall: 

clean: 
	-if exist $(__BUILDDIR__)\*.o del $(__BUILDDIR__)\*.o
	-if exist $(__BUILDDIR__)\*.d del $(__BUILDDIR__)\*.d
	-if exist .\sizers.exe del .\sizers.exe

.\sizers.exe: $(SIZERS_OBJECTS)
	$(CXX) -o $@ $(SIZERS_OBJECTS) $(LDFLAGS) -Wl,--subsystem,windows -mwindows -L$(HB_LIB_PATH) $(__WX_DEBUG_INFO_4) -L$(WX_PATH)\lib\gcc_lib -L..\..\$(__BUILDDIR__)  -Wl,--start-group $(__LIB_VM_p) $(__LIB_PP_p) $(__LIB_RTL_p) $(__LIB_RDD_p) $(__LIB_RDDFPT_p) $(__LIB_RDDCDX_p) $(__LIB_RDDNTX_p) -lhbsix $(__LIB_USRRDD_p) $(__LIB_MACRO_p) $(__LIB_COMMON_p) $(__LIB_LANG_p) $(__LIB_CPAGE_p) $(__LIB_DEBUG_p) $(__LIB_CPLR_p) $(__LIB_PCRE_p) $(__LIB_FM_p) $(__LIB_CT_p) $(__LIB_TIP_p) -lgtcgi -lgtstd -lgtpca -lgtwin $(__WXHLIBNAME_p) -Wl,--end-group -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lwsock32 -lwxmsw28$(WX_LIBID)_richtext -lwxmsw28$(WX_LIBID)_aui -lwxmsw28$(WX_LIBID)_core -lwxbase28$(WX_LIBID) -lwxtiff -lwxjpeg -lwxpng -lwxzlib -lwxregex$(WX_LIBID) -lwxmsw28$(WX_LIBID)_adv -lwxmsw28$(WX_LIBID)_html -lwxmsw28$(WX_LIBID)_xrc -lwxbase28$(WX_LIBID)_net -lwxbase28$(WX_LIBID)_xml -lwxexpat

run: all
	.\sizers.exe

$(__BUILDDIR__)\sizers_login.o: ./login.prg
	$(HBCC) $(SIZERS_HBFLAGS) -o$@ $<

$(__BUILDDIR__)\sizers_main.o: ./main.prg
	$(HBCC) $(SIZERS_HBFLAGS) -o$@ $<

.PHONY: all install uninstall clean


SHELL := $(COMSPEC)

# Dependencies tracking:
-include $(__BUILDDIR__)/*.d
